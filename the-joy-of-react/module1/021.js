// key必须是唯一的，但不必全局唯一，只需要在同一层级唯一即可

function Grid() {
  // 写一个grid组件，return3行4列的列表
  return (
    <div>
      {[0, 1, 2].map((row) => {
        <div key={row}>
          {[0, 1, 2, 3].map((col) => {
            <div key={col} />;
          })}
        </div>;
      })}
    </div>
  );
}
//在React中，当你创建一个元素列表时，应该给每个元素提供一个唯一的key属性。这个key帮助React识别哪些元素改变了，例如被添加或删除。这使得React能够更有效地重新渲染列表。

// key的唯一性是针对其同级的兄弟元素来说的，而不是全局唯一。换句话说，列表的每一个元素的key需要在其兄弟元素中唯一。React 在进行Diff算法比较时，会先在同一层级进行比较，所以你不需要担心全局唯一。

//在React中，当状态改变导致需要重新渲染组件树时，React需要确定需要更新哪些DOM元素。React通过对比新旧组件树的步骤被称为"Reconciliation"（也被称为Diffing算法），这个过程会高效地确定哪些部分需要改变。

//React在执行Diffing算法时，会依照两个主要假设：

//1。两个不同类型的元素会产生不同类型的树。
//2.由相同类型的元素（比如说，一个列表）生成的元素，元素的key应该是稳定的。

//基于这些原则，React会按层级在树中进行比较。也就是说，如果一个组件的元素类型在新旧渲染间改变了，React会直接销毁旧的子树，完全重新创建一个新的子树。同样，key也会首先在同一个层级内部进行匹配，帮助React确定是否有可以重用的元素。

//因此，key在其兄弟元素中需要是唯一的，因为它帮助React在同一层级的子元素中进行匹配。
